// Code generated by hertz generator.

package api_gateway

import (
	"context"
	"fmt"
	"net/http"
	"strconv"
	"time"

	// api_gateway "server/api_gateway/biz/model/api_gateway"
	"server/api_gateway/biz/model/api_gateway"
	"server/framework/logger"
	"server/service/rag_svr/kitex_gen/rag_svr"
	ragservice "server/service/rag_svr/kitex_gen/rag_svr/ragservice"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
)

// Ping .
// @router /ping [GET]
func Ping(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.PingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	logger.Infof("Ping接口收到请求: %+v", req)

	resp := new(api_gateway.PingRsp)
	resp.Code = 0
	resp.Msg = "succ"

	c.JSON(consts.StatusOK, resp)
}

// Test .
// @router /test [GET]
func Test(ctx context.Context, c *app.RequestContext) {
	var req rag_svr.TestReq
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_test_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 设置请求参数
	if req.SeqId == 0 {
		req.SeqId = uint32(time.Now().UnixNano())
	}

	// 获取下游服务端地址
	ri := rpcinfo.GetRPCInfo(ctx)
	var ragSvAddr string
	if ri != nil && ri.To() != nil {
		ragSvAddr = ri.To().Address().String()
	}

	resp, err := ragSvrClient.Test(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	logger.Infof("Test接口调用rag_svr下游地址: %s", ragSvAddr)

	c.JSON(consts.StatusOK, utils.H{
		"code": resp.Code,
		"msg":  resp.Msg,
	})
}

// Test2 .
// @router /test2 [POST]
func Test2(ctx context.Context, c *app.RequestContext) {
	var req rag_svr.Test2Req
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_test2_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 Test2 方法
	resp, err := ragSvrClient.Test2(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	c.JSON(consts.StatusOK, utils.H{
		"code": resp.Code,
		"msg":  resp.Msg,
	})
}

// CreateSession .
// @router /session/create [POST]
func CreateSession(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.CreateSessionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 CreateSession 方法
	resp, err := ragSvrClient.CreateSession(ctx, &rag_svr.CreateSessionReq{
		UserId: req.UserId,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	// 检查响应状态
	if resp.Code != 0 {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("创建会话失败: %s", resp.Msg),
		})
		return
	}

	// 检查 SessionInfo 是否为空
	if resp.SessionInfo == nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "创建会话失败: 返回的会话信息为空",
		})
		return
	}

	c.JSON(consts.StatusOK, utils.H{
		"code":        resp.Code,
		"msg":         resp.Msg,
		"session_id":  resp.SessionInfo.SessionId,
		"create_time": resp.SessionInfo.CreateTime,
	})
}

// EndSession .
// @router /session/end [POST]
func EndSession(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.EndSessionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 EndSession 方法
	resp, err := ragSvrClient.EndSession(ctx, &rag_svr.EndSessionReq{
		SessionId: req.SessionId,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	c.JSON(consts.StatusOK, utils.H{
		"code": resp.Code,
		"msg":  resp.Msg,
	})
}

// AddDocument .
// @router /document/add [POST]
func AddDocument(ctx context.Context, c *app.RequestContext) {
	logger.Infof("start AddDocument")
	var err error
	var req api_gateway.AddDocumentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.Errorf("AddDocument BindAndValidate error: %v", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		logger.Errorf("AddDocument client not found")
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	resp, err := ragSvrClient.AddDocument(
		ctx,
		&rag_svr.AddDocumentReq{
			UserId:   req.UserId,
			Title:    req.Title,
			Content:  req.Content,
			Metadata: req.Metadata,
		},
		callopt.WithRPCTimeout(60*time.Second),
	)
	if err != nil {
		logger.Errorf("AddDocument error: %v", err)
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	logger.Infof("AddDocument success,code=%d, msg=%s, doc_id=%d", resp.Code, resp.Msg, resp.DocId)

	c.JSON(consts.StatusOK, utils.H{
		"code":   resp.Code,
		"msg":    resp.Msg,
		"doc_id": resp.DocId,
	})
}

// SearchDocument .
// @router /document/search [GET]
func SearchDocument(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.SearchDocumentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 SearchDocument 方法
	resp, err := ragSvrClient.SearchDocument(ctx, &rag_svr.SearchDocumentReq{
		UserId: req.UserId,
		Query:  req.Query,
		TopK:   req.TopK,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	// 构建响应
	results := make([]map[string]interface{}, 0)
	for i, doc := range resp.Documents {
		results = append(results, map[string]interface{}{
			"doc_id":      doc.DocId,
			"title":       doc.Title,
			"content":     doc.Content,
			"score":       resp.Scores[i],
			"create_time": doc.CreateTime,
		})
	}

	c.JSON(consts.StatusOK, utils.H{
		"code":    resp.Code,
		"msg":     resp.Msg,
		"results": results,
	})
}

// CreateUser .
// @router /user/create [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.CreateUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 CreateUser 方法
	resp, err := ragSvrClient.CreateUser(ctx, &rag_svr.CreateUserReq{
		Username: req.Username,
		Email:    req.Email,
		Password: req.Password,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	c.JSON(consts.StatusOK, utils.H{
		"code":        resp.Code,
		"msg":         resp.Msg,
		"user_id":     resp.UserInfo.UserId,
		"username":    resp.UserInfo.UserName,
		"email":       resp.UserInfo.Email,
		"create_time": resp.UserInfo.CreateTime,
	})
}

// ListDocument .
// @router /document/list [GET]
func ListDocument(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.ListDocumentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 ListDocument 方法
	resp, err := ragSvrClient.ListDocument(ctx, &rag_svr.ListDocumentReq{
		UserId:   req.UserId,
		Page:     req.Page,
		PageSize: req.PageSize,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	// 构建响应
	documents := make([]map[string]interface{}, 0)
	for _, doc := range resp.Documents {
		documents = append(documents, map[string]interface{}{
			"doc_id":      doc.DocId,
			"title":       doc.Title,
			"content":     doc.Content,
			"metadata":    doc.Metadata,
			"create_time": doc.CreateTime,
			"update_time": doc.UpdateTime,
		})
	}

	c.JSON(consts.StatusOK, utils.H{
		"code":      resp.Code,
		"msg":       resp.Msg,
		"total":     resp.Total,
		"page":      resp.Page,
		"page_size": resp.PageSize,
		"documents": documents,
	})
}

// GetSession .
// @router /session/{session_id} [GET]
func GetSession(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.GetSessionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 GetSession 方法
	resp, err := ragSvrClient.GetSession(ctx, &rag_svr.GetSessionReq{
		SessionId: req.SessionId,
		UserId:    req.UserId,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	// 构建响应
	chatRecords := make([]map[string]interface{}, 0)
	for _, record := range resp.SessionInfo.ChatRecords {
		chatRecords = append(chatRecords, map[string]interface{}{
			"chat_id":      record.ChatId,
			"message":      record.Message,
			"response":     record.Response,
			"create_time":  record.CreateTime,
			"message_type": record.MessageType,
			"status":       record.Status,
		})
	}

	c.JSON(consts.StatusOK, utils.H{
		"code":         resp.Code,
		"msg":          resp.Msg,
		"session_id":   resp.SessionInfo.SessionId,
		"user_id":      resp.SessionInfo.UserId,
		"title":        resp.SessionInfo.Title,
		"summary":      resp.SessionInfo.Summary,
		"status":       resp.SessionInfo.Status,
		"create_time":  resp.SessionInfo.CreateTime,
		"update_time":  resp.SessionInfo.UpdateTime,
		"user_state":   resp.SessionInfo.UserState,
		"system_state": resp.SessionInfo.SystemState,
		"metadata":     resp.SessionInfo.Metadata,
		"chat_records": chatRecords,
	})
}

// GetSessionList .
// @router /session/list [GET]
func GetSessionList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.GetSessionListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 GetSessionList 方法
	resp, err := ragSvrClient.GetSessionList(ctx, &rag_svr.GetSessionListReq{
		UserId:   req.UserId,
		Page:     req.Page,
		PageSize: req.PageSize,
		Status:   req.Status,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	// 构建响应
	sessions := make([]map[string]interface{}, 0)
	for _, session := range resp.SessionList {
		sessions = append(sessions, map[string]interface{}{
			"session_id":   session.SessionId,
			"user_id":      session.UserId,
			"title":        session.Title,
			"summary":      session.Summary,
			"status":       session.Status,
			"create_time":  session.CreateTime,
			"update_time":  session.UpdateTime,
			"user_state":   session.UserState,
			"system_state": session.SystemState,
			"metadata":     session.Metadata,
		})
	}

	c.JSON(consts.StatusOK, utils.H{
		"code":      resp.Code,
		"msg":       resp.Msg,
		"total":     resp.Total,
		"page":      resp.Page,
		"page_size": resp.PageSize,
		"sessions":  sessions,
	})
}

// DeleteDocument .
// @router /document/{doc_id} [DELETE]
func DeleteDocument(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.DeleteDocumentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 DeleteDocument 方法
	resp, err := ragSvrClient.DeleteDocument(ctx, &rag_svr.DeleteDocumentReq{
		DocId:  req.DocId,
		UserId: req.UserId,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	c.JSON(consts.StatusOK, utils.H{
		"code": resp.Code,
		"msg":  resp.Msg,
	})
}

// AddMemory 添加记忆
func AddMemory(ctx context.Context, c *app.RequestContext) {
	var req api_gateway.AddMemoryReq
	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("解析请求失败: %v", err),
		})
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 RAG 服务
	resp, err := ragSvrClient.AddMemory(ctx, &rag_svr.AddMemoryReq{
		UserId:     req.UserId,
		Content:    req.Content,
		MemoryType: req.MemoryType,
		Importance: req.Importance,
		Metadata:   req.Metadata,
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("添加记忆失败: %v", err),
		})
		return
	}

	c.JSON(http.StatusOK, api_gateway.AddMemoryRsp{
		Code:     resp.Code,
		Msg:      resp.Msg,
		MemoryId: resp.MemoryId,
	})
}

// GetMemory 获取记忆
func GetMemory(ctx context.Context, c *app.RequestContext) {
	memoryId := c.Query("memory_id")
	if memoryId == "" {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "memory_id 不能为空",
		})
		return
	}

	id, err := strconv.ParseUint(memoryId, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("无效的 memory_id: %v", err),
		})
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 RAG 服务
	resp, err := ragSvrClient.GetMemory(ctx, &rag_svr.GetMemoryReq{
		MemoryId: id,
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("获取记忆失败: %v", err),
		})
		return
	}

	// 转换 Memory 类型
	memory := &api_gateway.Memory{
		MemoryId:    resp.Memory.MemoryId,
		UserId:      resp.Memory.UserId,
		Content:     resp.Memory.Content,
		MemoryType:  resp.Memory.MemoryType,
		Importance:  resp.Memory.Importance,
		Metadata:    resp.Memory.Metadata,
		CreateTime:  resp.Memory.CreateTime,
		UpdateTime:  resp.Memory.UpdateTime,
		ExpireTime:  resp.Memory.ExpireTime,
		AccessCount: resp.Memory.AccessCount,
	}

	c.JSON(http.StatusOK, api_gateway.GetMemoryRsp{
		Code:   uint32(resp.Code),
		Msg:    resp.Msg,
		Memory: memory,
	})
}

// SearchMemories 搜索记忆
func SearchMemories(ctx context.Context, c *app.RequestContext) {
	query := c.Query("query")
	if query == "" {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "query 不能为空",
		})
		return
	}

	limit := c.DefaultQuery("limit", "10")
	limitInt, err := strconv.Atoi(limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("无效的 limit: %v", err),
		})
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 RAG 服务
	resp, err := ragSvrClient.SearchMemories(ctx, &rag_svr.SearchMemoriesReq{
		Query: query,
		Limit: int32(limitInt),
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("搜索记忆失败: %v", err),
		})
		return
	}

	// 转换 Memories 类型
	memories := make([]*api_gateway.Memory, len(resp.Memories))
	for i, m := range resp.Memories {
		memories[i] = &api_gateway.Memory{
			MemoryId:    m.MemoryId,
			UserId:      m.UserId,
			Content:     m.Content,
			MemoryType:  m.MemoryType,
			Importance:  m.Importance,
			Metadata:    m.Metadata,
			CreateTime:  m.CreateTime,
			UpdateTime:  m.UpdateTime,
			ExpireTime:  m.ExpireTime,
			AccessCount: m.AccessCount,
		}
	}

	c.JSON(http.StatusOK, api_gateway.SearchMemoriesRsp{
		Code:     uint32(resp.Code),
		Msg:      resp.Msg,
		Memories: memories,
	})
}

// DeleteMemory 删除记忆
func DeleteMemory(ctx context.Context, c *app.RequestContext) {
	memoryId := c.Query("memory_id")
	if memoryId == "" {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "memory_id 不能为空",
		})
		return
	}

	memoryIdInt, err := strconv.ParseUint(memoryId, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("无效的 memory_id: %v", err),
		})
		return
	}

	userId := c.Query("user_id")
	if userId == "" {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "user_id 不能为空",
		})
		return
	}

	userIdInt, err := strconv.ParseUint(userId, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("无效的 user_id: %v", err),
		})
		return
	}

	var req api_gateway.DeleteMemoryReq
	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("解析请求失败: %v", err),
		})
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 RAG 服务
	resp, err := ragSvrClient.DeleteMemory(ctx, &rag_svr.DeleteMemoryReq{
		MemoryId: memoryIdInt,
		UserId:   userIdInt,
		Reason:   req.Reason,
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("删除记忆失败: %v", err),
		})
		return
	}

	c.JSON(http.StatusOK, api_gateway.DeleteMemoryRsp{
		Code: resp.Code,
		Msg:  resp.Msg,
	})
}

// AddChatRecord 添加聊天记录
func AddChatRecord(ctx context.Context, c *app.RequestContext) {
	var req api_gateway.AddChatRecordReq
	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("解析请求失败: %v", err),
		})
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 RAG 服务
	resp, err := ragSvrClient.AddChatRecord(ctx, &rag_svr.AddChatRecordReq{
		SessionId:     uint64(req.SessionId),
		UserId:        uint64(req.UserId),
		Message:       req.Message,
		Response:      req.Response,
		MessageType:   req.MessageType,
		Context:       req.Context,
		FunctionCalls: req.FunctionCalls,
		Metadata:      req.Metadata,
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("添加聊天记录失败: %v", err),
		})
		return
	}

	c.JSON(http.StatusOK, api_gateway.AddChatRecordRsp{
		Code:   int32(resp.Code),
		Msg:    resp.Msg,
		ChatId: int64(resp.ChatId),
	})
}

// GetChatRecords 获取聊天记录
func GetChatRecords(ctx context.Context, c *app.RequestContext) {
	sessionId := c.Query("session_id")
	if sessionId == "" {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "session_id 不能为空",
		})
		return
	}

	id, err := strconv.ParseUint(sessionId, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("无效的 session_id: %v", err),
		})
		return
	}

	page := c.DefaultQuery("page", "1")
	pageSize := c.DefaultQuery("page_size", "20")
	pageInt, err := strconv.Atoi(page)
	if err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("无效的 page: %v", err),
		})
		return
	}
	pageSizeInt, err := strconv.Atoi(pageSize)
	if err != nil {
		c.JSON(http.StatusBadRequest, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("无效的 page_size: %v", err),
		})
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 RAG 服务
	resp, err := ragSvrClient.GetChatRecords(ctx, &rag_svr.GetChatRecordsReq{
		SessionId: id,
		Page:      int32(pageInt),
		PageSize:  int32(pageSizeInt),
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, api_gateway.BaseRsp{
			Code: 1,
			Msg:  fmt.Sprintf("获取聊天记录失败: %v", err),
		})
		return
	}

	// 转换 Records 类型
	records := make([]*api_gateway.ChatRecord, len(resp.Records))
	for i, r := range resp.Records {
		records[i] = &api_gateway.ChatRecord{
			ChatId:      int64(r.ChatId),
			SessionId:   int64(r.SessionId),
			UserId:      int64(r.UserId),
			Message:     r.Message,
			Response:    r.Response,
			MessageType: r.MessageType,
			Status:      r.Status,
			CreateTime:  r.CreateTime,
		}
	}

	// logger.Infof("获取聊天记录完成: sessionId: %d, records: %v", id, records)

	c.JSON(http.StatusOK, api_gateway.GetChatRecordsRsp{
		Code:     int32(resp.Code),
		Msg:      resp.Msg,
		Total:    resp.Total,
		Page:     resp.Page,
		PageSize: resp.PageSize,
		Records:  records,
	})
}

// GetWeather .
// @router /weather/get [GET]
func GetWeather(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.GetWeatherReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 GetWeather 方法
	resp, err := ragSvrClient.GetWeather(ctx, &rag_svr.GetWeatherReq{
		Location: req.Location,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	// 检查响应状态
	if resp.Code != 0 {
		c.JSON(consts.StatusOK, utils.H{
			"code": resp.Code,
			"msg":  resp.Msg,
		})
		return
	}

	// 检查天气信息是否为空
	if resp.Weather == nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "天气信息为空",
		})
		return
	}

	// 构建响应，处理可能的空值
	weather := utils.H{
		"location":    resp.Weather.Location,
		"weather":     resp.Weather.Weather,
		"temperature": resp.Weather.Temperature,
		"humidity":    resp.Weather.Humidity,
		"wind_speed":  resp.Weather.WindSpeed,
		"wind_dir":    resp.Weather.WindDir,
		"update_time": resp.Weather.UpdateTime,
	}

	// 检查并处理空值
	if weather["humidity"] == 0 {
		weather["humidity"] = nil
	}
	if weather["temperature"] == 0 {
		weather["temperature"] = nil
	}
	if weather["wind_speed"] == 0 {
		weather["wind_speed"] = nil
	}

	c.JSON(consts.StatusOK, utils.H{
		"code":    resp.Code,
		"msg":     resp.Msg,
		"weather": weather,
	})
}

// GetHourlyWeather .
// @router /weather/hourly [GET]
func GetHourlyWeather(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.GetHourlyWeatherReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 GetHourlyWeather 方法
	resp, err := ragSvrClient.GetHourlyWeather(ctx, &rag_svr.GetHourlyWeatherReq{
		Location: req.Location,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	// 检查响应状态
	if resp.Code != 0 {
		c.JSON(consts.StatusOK, utils.H{
			"code": resp.Code,
			"msg":  resp.Msg,
		})
		return
	}

	// 构建响应
	hourly := make([]map[string]interface{}, len(resp.Hourly))
	for i, hour := range resp.Hourly {
		hourly[i] = map[string]interface{}{
			"time":        hour.Time,
			"weather":     hour.Weather,
			"temperature": hour.Temperature,
			"humidity":    hour.Humidity,
			"wind_speed":  hour.WindSpeed,
			"wind_dir":    hour.WindDir,
		}
	}

	c.JSON(consts.StatusOK, utils.H{
		"code":     resp.Code,
		"msg":      resp.Msg,
		"location": resp.Location,
		"hourly":   hourly,
	})
}

// GetDailyWeather .
// @router /weather/daily [GET]
func GetDailyWeather(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.GetDailyWeatherReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 GetDailyWeather 方法
	resp, err := ragSvrClient.GetDailyWeather(ctx, &rag_svr.GetDailyWeatherReq{
		Location: req.Location,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	// 检查响应状态
	if resp.Code != 0 {
		c.JSON(consts.StatusOK, utils.H{
			"code": resp.Code,
			"msg":  resp.Msg,
		})
		return
	}

	// 构建响应
	daily := make([]map[string]interface{}, len(resp.Daily))
	for i, day := range resp.Daily {
		daily[i] = map[string]interface{}{
			"date":       day.Date,
			"text_day":   day.TextDay,
			"text_night": day.TextNight,
			"high_temp":  day.HighTemp,
			"low_temp":   day.LowTemp,
			"rainfall":   day.Rainfall,
			"precip":     day.Precip,
			"wind_dir":   day.WindDir,
			"wind_speed": day.WindSpeed,
			"wind_scale": day.WindScale,
			"humidity":   day.Humidity,
		}
	}

	c.JSON(consts.StatusOK, utils.H{
		"code":     resp.Code,
		"msg":      resp.Msg,
		"location": resp.Location,
		"daily":    daily,
	})
}
