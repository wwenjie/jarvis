// Code generated by hertz generator.

package api_gateway

import (
	"context"
	"fmt"
	"time"

	// api_gateway "server/api_gateway/biz/model/api_gateway"
	"server/api_gateway/biz/model/api_gateway"
	"server/service/rag_svr/kitex_gen/rag_svr"
	ragservice "server/service/rag_svr/kitex_gen/rag_svr/ragservice"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
)

// Ping .
// @router /ping [GET]
func Ping(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_gateway.PingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	hlog.Infof("Ping接口收到请求: %+v", req)

	resp := new(api_gateway.PingRsp)
	resp.Code = 0
	resp.Msg = "succ"

	c.JSON(consts.StatusOK, resp)
}

// Test .
// @router /test [GET]
func Test(ctx context.Context, c *app.RequestContext) {
	var req rag_svr.TestReq
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_test_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 设置请求参数
	if req.SeqId == 0 {
		req.SeqId = uint32(time.Now().UnixNano())
	}

	// 获取下游服务端地址
	ri := rpcinfo.GetRPCInfo(ctx)
	var ragSvAddr string
	if ri != nil && ri.To() != nil {
		ragSvAddr = ri.To().Address().String()
	}

	resp, err := ragSvrClient.Test(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	hlog.Infof("Test接口调用rag_svr下游地址: %s", ragSvAddr)

	c.JSON(consts.StatusOK, utils.H{
		"code": resp.Code,
		"msg":  resp.Msg,
	})
}

// Test2 .
// @router /test2 [POST]
func Test2(ctx context.Context, c *app.RequestContext) {
	var req rag_svr.Test2Req
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 从上下文中获取客户端
	client, exists := c.Get("rag_svr_test2_client")
	if !exists {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": "客户端未初始化",
		})
		return
	}

	ragSvrClient := client.(ragservice.Client)

	// 调用 rag_svr 的 Test2 方法
	resp, err := ragSvrClient.Test2(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, utils.H{
			"error": fmt.Sprintf("调用服务失败: %v", err),
		})
		return
	}

	c.JSON(consts.StatusOK, utils.H{
		"code": resp.Code,
		"msg":  resp.Msg,
	})
}
