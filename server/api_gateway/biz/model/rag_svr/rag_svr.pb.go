// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: rag_svr.proto

package rag_svr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 基础响应
type BaseRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
}

func (x *BaseRsp) Reset() {
	*x = BaseRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRsp) ProtoMessage() {}

func (x *BaseRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRsp.ProtoReflect.Descriptor instead.
func (*BaseRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{0}
}

func (x *BaseRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 定义获取用户请求
type TestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
}

func (x *TestReq) Reset() {
	*x = TestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReq) ProtoMessage() {}

func (x *TestReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReq.ProtoReflect.Descriptor instead.
func (*TestReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{1}
}

func (x *TestReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *TestReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 定义获取用户响应
type TestRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
}

func (x *TestRsp) Reset() {
	*x = TestRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRsp) ProtoMessage() {}

func (x *TestRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRsp.ProtoReflect.Descriptor instead.
func (*TestRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{2}
}

func (x *TestRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TestRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Test2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
}

func (x *Test2Req) Reset() {
	*x = Test2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test2Req) ProtoMessage() {}

func (x *Test2Req) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test2Req.ProtoReflect.Descriptor instead.
func (*Test2Req) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{3}
}

func (x *Test2Req) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *Test2Req) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Test2Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
}

func (x *Test2Rsp) Reset() {
	*x = Test2Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test2Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test2Rsp) ProtoMessage() {}

func (x *Test2Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test2Rsp.ProtoReflect.Descriptor instead.
func (*Test2Rsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{4}
}

func (x *Test2Rsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Test2Rsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 用户管理
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	UserName   string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" form:"user_name" json:"user_name,omitempty" query:"user_name"`
	Email      string `protobuf:"bytes,3,opt,name=email,proto3" form:"email" json:"email,omitempty" query:"email"`
	CreateTime string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" form:"create_time" json:"create_time,omitempty" query:"create_time"`
	UpdateTime string `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" form:"update_time" json:"update_time,omitempty" query:"update_time"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{5}
}

func (x *UserInfo) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CreateUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId    uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" form:"username" json:"username,omitempty" query:"username"`
	Email    string `protobuf:"bytes,3,opt,name=email,proto3" form:"email" json:"email,omitempty" query:"email"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" form:"password" json:"password,omitempty" query:"password"`
}

func (x *CreateUserReq) Reset() {
	*x = CreateUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserReq) ProtoMessage() {}

func (x *CreateUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserReq.ProtoReflect.Descriptor instead.
func (*CreateUserReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{6}
}

func (x *CreateUserReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *CreateUserReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CreateUserRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     uint32    `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg      string    `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	UserInfo *UserInfo `protobuf:"bytes,3,opt,name=user_info,json=userInfo,proto3" form:"user_info" json:"user_info,omitempty" query:"user_info"`
}

func (x *CreateUserRsp) Reset() {
	*x = CreateUserRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRsp) ProtoMessage() {}

func (x *CreateUserRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRsp.ProtoReflect.Descriptor instead.
func (*CreateUserRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{7}
}

func (x *CreateUserRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateUserRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateUserRsp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// 会话管理（MySQL）
type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   uint64            `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" form:"session_id" json:"session_id,omitempty" query:"session_id"`
	UserId      uint64            `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Title       string            `protobuf:"bytes,3,opt,name=title,proto3" form:"title" json:"title,omitempty" query:"title"`         // 会话标题
	Summary     string            `protobuf:"bytes,4,opt,name=summary,proto3" form:"summary" json:"summary,omitempty" query:"summary"` // 会话摘要
	Status      string            `protobuf:"bytes,5,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`     // 会话状态
	CreateTime  string            `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" form:"create_time" json:"create_time,omitempty" query:"create_time"`
	UpdateTime  string            `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" form:"update_time" json:"update_time,omitempty" query:"update_time"`
	UserState   map[string]string `protobuf:"bytes,8,rep,name=user_state,json=userState,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" form:"user_state" json:"user_state,omitempty" query:"user_state"`           // 用户状态
	SystemState map[string]string `protobuf:"bytes,9,rep,name=system_state,json=systemState,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" form:"system_state" json:"system_state,omitempty" query:"system_state"` // 系统状态
	ChatRecords []*ChatRecord     `protobuf:"bytes,10,rep,name=chat_records,json=chatRecords,proto3" form:"chat_records" json:"chat_records,omitempty" query:"chat_records"`                                                                                        // 对话记录
	Metadata    map[string]string `protobuf:"bytes,11,rep,name=metadata,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" form:"metadata" json:"metadata,omitempty" query:"metadata"`                                 // 会话元数据
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{8}
}

func (x *SessionInfo) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SessionInfo) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SessionInfo) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *SessionInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SessionInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SessionInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SessionInfo) GetUserState() map[string]string {
	if x != nil {
		return x.UserState
	}
	return nil
}

func (x *SessionInfo) GetSystemState() map[string]string {
	if x != nil {
		return x.SystemState
	}
	return nil
}

func (x *SessionInfo) GetChatRecords() []*ChatRecord {
	if x != nil {
		return x.ChatRecords
	}
	return nil
}

func (x *SessionInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 对话记录
type ChatRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      uint64 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" form:"chat_id" json:"chat_id,omitempty" query:"chat_id"`
	SessionId   uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" form:"session_id" json:"session_id,omitempty" query:"session_id"`
	UserId      uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Message     string `protobuf:"bytes,4,opt,name=message,proto3" form:"message" json:"message,omitempty" query:"message"`
	Response    string `protobuf:"bytes,5,opt,name=response,proto3" form:"response" json:"response,omitempty" query:"response"`
	CreateTime  string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" form:"create_time" json:"create_time,omitempty" query:"create_time"`
	MessageType string `protobuf:"bytes,7,opt,name=message_type,json=messageType,proto3" form:"message_type" json:"message_type,omitempty" query:"message_type"` // text, image, etc.
	Status      string `protobuf:"bytes,8,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`                                          // pending, completed, failed
}

func (x *ChatRecord) Reset() {
	*x = ChatRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRecord) ProtoMessage() {}

func (x *ChatRecord) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRecord.ProtoReflect.Descriptor instead.
func (*ChatRecord) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{9}
}

func (x *ChatRecord) GetChatId() uint64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatRecord) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ChatRecord) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatRecord) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatRecord) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *ChatRecord) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ChatRecord) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *ChatRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 创建会话请求
type CreateSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId  uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
}

func (x *CreateSessionReq) Reset() {
	*x = CreateSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionReq) ProtoMessage() {}

func (x *CreateSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionReq.ProtoReflect.Descriptor instead.
func (*CreateSessionReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{10}
}

func (x *CreateSessionReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *CreateSessionReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CreateSessionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        uint32       `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg         string       `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	SessionInfo *SessionInfo `protobuf:"bytes,3,opt,name=session_info,json=sessionInfo,proto3" form:"session_info" json:"session_info,omitempty" query:"session_info"`
}

func (x *CreateSessionRsp) Reset() {
	*x = CreateSessionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRsp) ProtoMessage() {}

func (x *CreateSessionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRsp.ProtoReflect.Descriptor instead.
func (*CreateSessionRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{11}
}

func (x *CreateSessionRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateSessionRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateSessionRsp) GetSessionInfo() *SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

// 结束会话请求
type EndSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId     uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	SessionId uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" form:"session_id" json:"session_id,omitempty" query:"session_id"`
}

func (x *EndSessionReq) Reset() {
	*x = EndSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSessionReq) ProtoMessage() {}

func (x *EndSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSessionReq.ProtoReflect.Descriptor instead.
func (*EndSessionReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{12}
}

func (x *EndSessionReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *EndSessionReq) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

type EndSessionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
}

func (x *EndSessionRsp) Reset() {
	*x = EndSessionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndSessionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSessionRsp) ProtoMessage() {}

func (x *EndSessionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSessionRsp.ProtoReflect.Descriptor instead.
func (*EndSessionRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{13}
}

func (x *EndSessionRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EndSessionRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 知识文档
type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId      uint64 `protobuf:"varint,1,opt,name=doc_id,json=docId,proto3" form:"doc_id" json:"doc_id,omitempty" query:"doc_id"`
	UserId     uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Title      string `protobuf:"bytes,3,opt,name=title,proto3" form:"title" json:"title,omitempty" query:"title"`
	Content    string `protobuf:"bytes,4,opt,name=content,proto3" form:"content" json:"content,omitempty" query:"content"`
	Metadata   string `protobuf:"bytes,5,opt,name=metadata,proto3" form:"metadata" json:"metadata,omitempty" query:"metadata"`
	CreateTime string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" form:"create_time" json:"create_time,omitempty" query:"create_time"`
	UpdateTime string `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" form:"update_time" json:"update_time,omitempty" query:"update_time"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{14}
}

func (x *Document) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *Document) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Document) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Document) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Document) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Document) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Document) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type AddDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId    uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	UserId   uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" form:"title" json:"title,omitempty" query:"title"`
	Content  string `protobuf:"bytes,4,opt,name=content,proto3" form:"content" json:"content,omitempty" query:"content"`
	Metadata string `protobuf:"bytes,5,opt,name=metadata,proto3" form:"metadata" json:"metadata,omitempty" query:"metadata"`
}

func (x *AddDocumentReq) Reset() {
	*x = AddDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentReq) ProtoMessage() {}

func (x *AddDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentReq.ProtoReflect.Descriptor instead.
func (*AddDocumentReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{15}
}

func (x *AddDocumentReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *AddDocumentReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddDocumentReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddDocumentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddDocumentReq) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type AddDocumentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	DocId uint64 `protobuf:"varint,3,opt,name=doc_id,json=docId,proto3" form:"doc_id" json:"doc_id,omitempty" query:"doc_id"`
}

func (x *AddDocumentRsp) Reset() {
	*x = AddDocumentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentRsp) ProtoMessage() {}

func (x *AddDocumentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentRsp.ProtoReflect.Descriptor instead.
func (*AddDocumentRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{16}
}

func (x *AddDocumentRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddDocumentRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddDocumentRsp) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

type ListDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Page     int32  `protobuf:"varint,2,opt,name=page,proto3" form:"page" json:"page,omitempty" query:"page"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" form:"page_size" json:"page_size,omitempty" query:"page_size"`
}

func (x *ListDocumentReq) Reset() {
	*x = ListDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentReq) ProtoMessage() {}

func (x *ListDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentReq.ProtoReflect.Descriptor instead.
func (*ListDocumentReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{17}
}

func (x *ListDocumentReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListDocumentReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDocumentReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListDocumentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32      `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg       string      `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	Total     int64       `protobuf:"varint,3,opt,name=total,proto3" form:"total" json:"total,omitempty" query:"total"`
	Page      int32       `protobuf:"varint,4,opt,name=page,proto3" form:"page" json:"page,omitempty" query:"page"`
	PageSize  int32       `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	Documents []*Document `protobuf:"bytes,6,rep,name=documents,proto3" form:"documents" json:"documents,omitempty" query:"documents"`
}

func (x *ListDocumentRsp) Reset() {
	*x = ListDocumentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDocumentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentRsp) ProtoMessage() {}

func (x *ListDocumentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentRsp.ProtoReflect.Descriptor instead.
func (*ListDocumentRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{18}
}

func (x *ListDocumentRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListDocumentRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ListDocumentRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListDocumentRsp) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDocumentRsp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDocumentRsp) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

type SearchDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId  uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Query  string `protobuf:"bytes,3,opt,name=query,proto3" form:"query" json:"query,omitempty" query:"query"`
	TopK   int32  `protobuf:"varint,4,opt,name=top_k,json=topK,proto3" form:"top_k" json:"top_k,omitempty" query:"top_k"`
}

func (x *SearchDocumentReq) Reset() {
	*x = SearchDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDocumentReq) ProtoMessage() {}

func (x *SearchDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDocumentReq.ProtoReflect.Descriptor instead.
func (*SearchDocumentReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{19}
}

func (x *SearchDocumentReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *SearchDocumentReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchDocumentReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchDocumentReq) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

type SearchDocumentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32      `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg       string      `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	Documents []*Document `protobuf:"bytes,3,rep,name=documents,proto3" form:"documents" json:"documents,omitempty" query:"documents"`
	Scores    []float32   `protobuf:"fixed32,4,rep,packed,name=scores,proto3" form:"scores" json:"scores,omitempty" query:"scores"`
}

func (x *SearchDocumentRsp) Reset() {
	*x = SearchDocumentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDocumentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDocumentRsp) ProtoMessage() {}

func (x *SearchDocumentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDocumentRsp.ProtoReflect.Descriptor instead.
func (*SearchDocumentRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{20}
}

func (x *SearchDocumentRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SearchDocumentRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SearchDocumentRsp) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *SearchDocumentRsp) GetScores() []float32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

// 会话管理
type GetSessionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`                                // 可选，会话状态过滤
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" form:"start_time" json:"start_time,omitempty" query:"start_time"` // 可选，开始时间
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" form:"end_time" json:"end_time,omitempty" query:"end_time"`           // 可选，结束时间
	Page      int32  `protobuf:"varint,5,opt,name=page,proto3" form:"page" json:"page,omitempty" query:"page"`                                       // 页码，从1开始
	PageSize  int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" form:"page_size" json:"page_size,omitempty" query:"page_size"`     // 每页大小
}

func (x *GetSessionListReq) Reset() {
	*x = GetSessionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionListReq) ProtoMessage() {}

func (x *GetSessionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionListReq.ProtoReflect.Descriptor instead.
func (*GetSessionListReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{21}
}

func (x *GetSessionListReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSessionListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetSessionListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetSessionListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetSessionListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSessionListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetSessionListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        uint32         `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg         string         `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	Total       int64          `protobuf:"varint,3,opt,name=total,proto3" form:"total" json:"total,omitempty" query:"total"`                                             // 总数
	Page        int32          `protobuf:"varint,4,opt,name=page,proto3" form:"page" json:"page,omitempty" query:"page"`                                                 // 当前页码
	PageSize    int32          `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" form:"page_size" json:"page_size,omitempty" query:"page_size"`               // 每页大小
	SessionList []*SessionInfo `protobuf:"bytes,6,rep,name=session_list,json=sessionList,proto3" form:"session_list" json:"session_list,omitempty" query:"session_list"` // 会话列表
}

func (x *GetSessionListRsp) Reset() {
	*x = GetSessionListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionListRsp) ProtoMessage() {}

func (x *GetSessionListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionListRsp.ProtoReflect.Descriptor instead.
func (*GetSessionListRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{22}
}

func (x *GetSessionListRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSessionListRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetSessionListRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSessionListRsp) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSessionListRsp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSessionListRsp) GetSessionList() []*SessionInfo {
	if x != nil {
		return x.SessionList
	}
	return nil
}

// 获取会话详情
type GetSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId     uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	SessionId uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" form:"session_id" json:"session_id,omitempty" query:"session_id"`
	UserId    uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
}

func (x *GetSessionReq) Reset() {
	*x = GetSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionReq) ProtoMessage() {}

func (x *GetSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionReq.ProtoReflect.Descriptor instead.
func (*GetSessionReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{23}
}

func (x *GetSessionReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *GetSessionReq) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *GetSessionReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetSessionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        uint32       `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg         string       `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	SessionInfo *SessionInfo `protobuf:"bytes,3,opt,name=session_info,json=sessionInfo,proto3" form:"session_info" json:"session_info,omitempty" query:"session_info"`
}

func (x *GetSessionRsp) Reset() {
	*x = GetSessionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRsp) ProtoMessage() {}

func (x *GetSessionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRsp.ProtoReflect.Descriptor instead.
func (*GetSessionRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{24}
}

func (x *GetSessionRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSessionRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetSessionRsp) GetSessionInfo() *SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

// 删除文档
type DeleteDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId  uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	DocId  uint64 `protobuf:"varint,2,opt,name=doc_id,json=docId,proto3" form:"doc_id" json:"doc_id,omitempty" query:"doc_id"`
	UserId uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
}

func (x *DeleteDocumentReq) Reset() {
	*x = DeleteDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDocumentReq) ProtoMessage() {}

func (x *DeleteDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDocumentReq.ProtoReflect.Descriptor instead.
func (*DeleteDocumentReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteDocumentReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *DeleteDocumentReq) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *DeleteDocumentReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DeleteDocumentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
}

func (x *DeleteDocumentRsp) Reset() {
	*x = DeleteDocumentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDocumentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDocumentRsp) ProtoMessage() {}

func (x *DeleteDocumentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDocumentRsp.ProtoReflect.Descriptor instead.
func (*DeleteDocumentRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteDocumentRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteDocumentRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CleanInactiveSessionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InactiveDays int32 `protobuf:"varint,1,opt,name=inactive_days,json=inactiveDays,proto3" form:"inactive_days" json:"inactive_days,omitempty" query:"inactive_days"` // 不活跃天数
}

func (x *CleanInactiveSessionsReq) Reset() {
	*x = CleanInactiveSessionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanInactiveSessionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanInactiveSessionsReq) ProtoMessage() {}

func (x *CleanInactiveSessionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanInactiveSessionsReq.ProtoReflect.Descriptor instead.
func (*CleanInactiveSessionsReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{27}
}

func (x *CleanInactiveSessionsReq) GetInactiveDays() int32 {
	if x != nil {
		return x.InactiveDays
	}
	return 0
}

type CleanInactiveSessionsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg          string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	CleanedCount int64  `protobuf:"varint,3,opt,name=cleaned_count,json=cleanedCount,proto3" form:"cleaned_count" json:"cleaned_count,omitempty" query:"cleaned_count"` // 清理的会话数量
}

func (x *CleanInactiveSessionsRsp) Reset() {
	*x = CleanInactiveSessionsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanInactiveSessionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanInactiveSessionsRsp) ProtoMessage() {}

func (x *CleanInactiveSessionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanInactiveSessionsRsp.ProtoReflect.Descriptor instead.
func (*CleanInactiveSessionsRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{28}
}

func (x *CleanInactiveSessionsRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CleanInactiveSessionsRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CleanInactiveSessionsRsp) GetCleanedCount() int64 {
	if x != nil {
		return x.CleanedCount
	}
	return 0
}

// 记忆管理
type Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryId    uint64  `protobuf:"varint,1,opt,name=memory_id,json=memoryId,proto3" form:"memory_id" json:"memory_id,omitempty" query:"memory_id"`
	SessionId   uint64  `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" form:"session_id" json:"session_id,omitempty" query:"session_id"`
	UserId      uint64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Content     string  `protobuf:"bytes,4,opt,name=content,proto3" form:"content" json:"content,omitempty" query:"content"`
	MemoryType  string  `protobuf:"bytes,5,opt,name=memory_type,json=memoryType,proto3" form:"memory_type" json:"memory_type,omitempty" query:"memory_type"`
	Importance  float64 `protobuf:"fixed64,6,opt,name=importance,proto3" form:"importance" json:"importance,omitempty" query:"importance"`
	Metadata    string  `protobuf:"bytes,7,opt,name=metadata,proto3" form:"metadata" json:"metadata,omitempty" query:"metadata"`
	CreateTime  string  `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" form:"create_time" json:"create_time,omitempty" query:"create_time"`
	UpdateTime  string  `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" form:"update_time" json:"update_time,omitempty" query:"update_time"`
	ExpireTime  string  `protobuf:"bytes,10,opt,name=expire_time,json=expireTime,proto3" form:"expire_time" json:"expire_time,omitempty" query:"expire_time"`
	AccessCount int32   `protobuf:"varint,11,opt,name=access_count,json=accessCount,proto3" form:"access_count" json:"access_count,omitempty" query:"access_count"`
}

func (x *Memory) Reset() {
	*x = Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{29}
}

func (x *Memory) GetMemoryId() uint64 {
	if x != nil {
		return x.MemoryId
	}
	return 0
}

func (x *Memory) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Memory) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Memory) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Memory) GetMemoryType() string {
	if x != nil {
		return x.MemoryType
	}
	return ""
}

func (x *Memory) GetImportance() float64 {
	if x != nil {
		return x.Importance
	}
	return 0
}

func (x *Memory) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Memory) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Memory) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Memory) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

func (x *Memory) GetAccessCount() int32 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

type AddMemoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId      uint32  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	SessionId  uint64  `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" form:"session_id" json:"session_id,omitempty" query:"session_id"`
	UserId     uint64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Content    string  `protobuf:"bytes,4,opt,name=content,proto3" form:"content" json:"content,omitempty" query:"content"`
	MemoryType string  `protobuf:"bytes,5,opt,name=memory_type,json=memoryType,proto3" form:"memory_type" json:"memory_type,omitempty" query:"memory_type"`
	Importance float64 `protobuf:"fixed64,6,opt,name=importance,proto3" form:"importance" json:"importance,omitempty" query:"importance"`
	Metadata   string  `protobuf:"bytes,7,opt,name=metadata,proto3" form:"metadata" json:"metadata,omitempty" query:"metadata"`
}

func (x *AddMemoryReq) Reset() {
	*x = AddMemoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemoryReq) ProtoMessage() {}

func (x *AddMemoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemoryReq.ProtoReflect.Descriptor instead.
func (*AddMemoryReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{30}
}

func (x *AddMemoryReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *AddMemoryReq) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *AddMemoryReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddMemoryReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddMemoryReq) GetMemoryType() string {
	if x != nil {
		return x.MemoryType
	}
	return ""
}

func (x *AddMemoryReq) GetImportance() float64 {
	if x != nil {
		return x.Importance
	}
	return 0
}

func (x *AddMemoryReq) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type AddMemoryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	MemoryId uint64 `protobuf:"varint,3,opt,name=memory_id,json=memoryId,proto3" form:"memory_id" json:"memory_id,omitempty" query:"memory_id"`
}

func (x *AddMemoryRsp) Reset() {
	*x = AddMemoryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemoryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemoryRsp) ProtoMessage() {}

func (x *AddMemoryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemoryRsp.ProtoReflect.Descriptor instead.
func (*AddMemoryRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{31}
}

func (x *AddMemoryRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddMemoryRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddMemoryRsp) GetMemoryId() uint64 {
	if x != nil {
		return x.MemoryId
	}
	return 0
}

type GetMemoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId    uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	MemoryId uint64 `protobuf:"varint,2,opt,name=memory_id,json=memoryId,proto3" form:"memory_id" json:"memory_id,omitempty" query:"memory_id"`
	UserId   uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
}

func (x *GetMemoryReq) Reset() {
	*x = GetMemoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryReq) ProtoMessage() {}

func (x *GetMemoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryReq.ProtoReflect.Descriptor instead.
func (*GetMemoryReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{32}
}

func (x *GetMemoryReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *GetMemoryReq) GetMemoryId() uint64 {
	if x != nil {
		return x.MemoryId
	}
	return 0
}

func (x *GetMemoryReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetMemoryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   uint32  `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg    string  `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	Memory *Memory `protobuf:"bytes,3,opt,name=memory,proto3" form:"memory" json:"memory,omitempty" query:"memory"`
}

func (x *GetMemoryRsp) Reset() {
	*x = GetMemoryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemoryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryRsp) ProtoMessage() {}

func (x *GetMemoryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryRsp.ProtoReflect.Descriptor instead.
func (*GetMemoryRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{33}
}

func (x *GetMemoryRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMemoryRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetMemoryRsp) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

type SearchMemoriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId  uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Query  string `protobuf:"bytes,3,opt,name=query,proto3" form:"query" json:"query,omitempty" query:"query"`
	Limit  int32  `protobuf:"varint,4,opt,name=limit,proto3" form:"limit" json:"limit,omitempty" query:"limit"`
}

func (x *SearchMemoriesReq) Reset() {
	*x = SearchMemoriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMemoriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMemoriesReq) ProtoMessage() {}

func (x *SearchMemoriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMemoriesReq.ProtoReflect.Descriptor instead.
func (*SearchMemoriesReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{34}
}

func (x *SearchMemoriesReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *SearchMemoriesReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchMemoriesReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchMemoriesReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchMemoriesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     uint32    `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg      string    `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	Memories []*Memory `protobuf:"bytes,3,rep,name=memories,proto3" form:"memories" json:"memories,omitempty" query:"memories"`
}

func (x *SearchMemoriesRsp) Reset() {
	*x = SearchMemoriesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMemoriesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMemoriesRsp) ProtoMessage() {}

func (x *SearchMemoriesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMemoriesRsp.ProtoReflect.Descriptor instead.
func (*SearchMemoriesRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{35}
}

func (x *SearchMemoriesRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SearchMemoriesRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SearchMemoriesRsp) GetMemories() []*Memory {
	if x != nil {
		return x.Memories
	}
	return nil
}

type DeleteMemoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId    uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	MemoryId uint64 `protobuf:"varint,2,opt,name=memory_id,json=memoryId,proto3" form:"memory_id" json:"memory_id,omitempty" query:"memory_id"`
	UserId   uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Reason   string `protobuf:"bytes,4,opt,name=reason,proto3" form:"reason" json:"reason,omitempty" query:"reason"`
}

func (x *DeleteMemoryReq) Reset() {
	*x = DeleteMemoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMemoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMemoryReq) ProtoMessage() {}

func (x *DeleteMemoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMemoryReq.ProtoReflect.Descriptor instead.
func (*DeleteMemoryReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteMemoryReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *DeleteMemoryReq) GetMemoryId() uint64 {
	if x != nil {
		return x.MemoryId
	}
	return 0
}

func (x *DeleteMemoryReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteMemoryReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DeleteMemoryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
}

func (x *DeleteMemoryRsp) Reset() {
	*x = DeleteMemoryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMemoryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMemoryRsp) ProtoMessage() {}

func (x *DeleteMemoryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMemoryRsp.ProtoReflect.Descriptor instead.
func (*DeleteMemoryRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteMemoryRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteMemoryRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 聊天记录管理
type AddChatRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId         uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	SessionId     uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" form:"session_id" json:"session_id,omitempty" query:"session_id"`
	UserId        uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Message       string `protobuf:"bytes,4,opt,name=message,proto3" form:"message" json:"message,omitempty" query:"message"`
	Response      string `protobuf:"bytes,5,opt,name=response,proto3" form:"response" json:"response,omitempty" query:"response"`
	MessageType   string `protobuf:"bytes,6,opt,name=message_type,json=messageType,proto3" form:"message_type" json:"message_type,omitempty" query:"message_type"`
	Context       string `protobuf:"bytes,7,opt,name=context,proto3" form:"context" json:"context,omitempty" query:"context"`
	FunctionCalls string `protobuf:"bytes,8,opt,name=function_calls,json=functionCalls,proto3" form:"function_calls" json:"function_calls,omitempty" query:"function_calls"`
	Metadata      string `protobuf:"bytes,9,opt,name=metadata,proto3" form:"metadata" json:"metadata,omitempty" query:"metadata"`
}

func (x *AddChatRecordReq) Reset() {
	*x = AddChatRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChatRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChatRecordReq) ProtoMessage() {}

func (x *AddChatRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChatRecordReq.ProtoReflect.Descriptor instead.
func (*AddChatRecordReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{38}
}

func (x *AddChatRecordReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *AddChatRecordReq) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *AddChatRecordReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddChatRecordReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddChatRecordReq) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *AddChatRecordReq) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *AddChatRecordReq) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *AddChatRecordReq) GetFunctionCalls() string {
	if x != nil {
		return x.FunctionCalls
	}
	return ""
}

func (x *AddChatRecordReq) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type AddChatRecordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	ChatId uint64 `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" form:"chat_id" json:"chat_id,omitempty" query:"chat_id"`
}

func (x *AddChatRecordRsp) Reset() {
	*x = AddChatRecordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChatRecordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChatRecordRsp) ProtoMessage() {}

func (x *AddChatRecordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChatRecordRsp.ProtoReflect.Descriptor instead.
func (*AddChatRecordRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{39}
}

func (x *AddChatRecordRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddChatRecordRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddChatRecordRsp) GetChatId() uint64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

type GetChatRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId     uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" form:"seq_id" json:"seq_id,omitempty" query:"seq_id"`
	SessionId uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" form:"session_id" json:"session_id,omitempty" query:"session_id"`
	Page      int32  `protobuf:"varint,3,opt,name=page,proto3" form:"page" json:"page,omitempty" query:"page"`
	PageSize  int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" form:"page_size" json:"page_size,omitempty" query:"page_size"`
}

func (x *GetChatRecordsReq) Reset() {
	*x = GetChatRecordsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRecordsReq) ProtoMessage() {}

func (x *GetChatRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRecordsReq.ProtoReflect.Descriptor instead.
func (*GetChatRecordsReq) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{40}
}

func (x *GetChatRecordsReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *GetChatRecordsReq) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *GetChatRecordsReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetChatRecordsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetChatRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     uint32        `protobuf:"varint,1,opt,name=code,proto3" form:"code" json:"code,omitempty" query:"code"`
	Msg      string        `protobuf:"bytes,2,opt,name=msg,proto3" form:"msg" json:"msg,omitempty" query:"msg"`
	Total    int64         `protobuf:"varint,3,opt,name=total,proto3" form:"total" json:"total,omitempty" query:"total"`
	Page     int32         `protobuf:"varint,4,opt,name=page,proto3" form:"page" json:"page,omitempty" query:"page"`
	PageSize int32         `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	Records  []*ChatRecord `protobuf:"bytes,6,rep,name=records,proto3" form:"records" json:"records,omitempty" query:"records"`
}

func (x *GetChatRecordsRsp) Reset() {
	*x = GetChatRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_svr_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRecordsRsp) ProtoMessage() {}

func (x *GetChatRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rag_svr_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRecordsRsp.ProtoReflect.Descriptor instead.
func (*GetChatRecordsRsp) Descriptor() ([]byte, []int) {
	return file_rag_svr_proto_rawDescGZIP(), []int{41}
}

func (x *GetChatRecordsRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetChatRecordsRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetChatRecordsRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetChatRecordsRsp) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetChatRecordsRsp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetChatRecordsRsp) GetRecords() []*ChatRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

var File_rag_svr_proto protoreflect.FileDescriptor

var file_rag_svr_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x22, 0x2f, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x32, 0x0a, 0x07, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x2f, 0x0a,
	0x07, 0x54, 0x65, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x33,
	0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x32, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x30, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x32, 0x52, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x74, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x65, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x90, 0x05,
	0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x61, 0x67, 0x5f,
	0x73, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76,
	0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xef, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x37, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x0d, 0x45, 0x6e, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x35, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc8, 0x01, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x4d, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64,
	0x22, 0x5b, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xaf, 0x01,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x6e, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x5f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x22,
	0x82, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x09, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x6e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x39,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x3f, 0x0a, 0x18, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x79, 0x73, 0x22, 0x65, 0x0a, 0x18, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xda, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd4,
	0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61,
	0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x22, 0x6f, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x66, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x76, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x97,
	0x02, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61,
	0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0xbf, 0x09, 0x0a, 0x0a, 0x52, 0x61,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x54, 0x65, 0x73, 0x74, 0x32, 0x12, 0x11, 0x2e,
	0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x32, 0x52, 0x65, 0x71,
	0x1a, 0x11, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x32,
	0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x72, 0x61, 0x67, 0x5f,
	0x73, 0x76, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x45,
	0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x72,
	0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x5d,
	0x0a, 0x15, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76,
	0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x72, 0x61, 0x67,
	0x5f, 0x73, 0x76, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12, 0x3f, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x72,
	0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x48,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x72,
	0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x72, 0x61, 0x67,
	0x5f, 0x73, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x42, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x72,
	0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x15, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x67,
	0x5f, 0x73, 0x76, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x73,
	0x70, 0x12, 0x39, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x15,
	0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a,
	0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x67,
	0x5f, 0x73, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x72, 0x61,
	0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x76, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x42, 0x26, 0x5a, 0x24, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x72, 0x61, 0x67, 0x5f,
	0x73, 0x76, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rag_svr_proto_rawDescOnce sync.Once
	file_rag_svr_proto_rawDescData = file_rag_svr_proto_rawDesc
)

func file_rag_svr_proto_rawDescGZIP() []byte {
	file_rag_svr_proto_rawDescOnce.Do(func() {
		file_rag_svr_proto_rawDescData = protoimpl.X.CompressGZIP(file_rag_svr_proto_rawDescData)
	})
	return file_rag_svr_proto_rawDescData
}

var file_rag_svr_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_rag_svr_proto_goTypes = []interface{}{
	(*BaseRsp)(nil),                  // 0: rag_svr.BaseRsp
	(*TestReq)(nil),                  // 1: rag_svr.TestReq
	(*TestRsp)(nil),                  // 2: rag_svr.TestRsp
	(*Test2Req)(nil),                 // 3: rag_svr.Test2Req
	(*Test2Rsp)(nil),                 // 4: rag_svr.Test2Rsp
	(*UserInfo)(nil),                 // 5: rag_svr.UserInfo
	(*CreateUserReq)(nil),            // 6: rag_svr.CreateUserReq
	(*CreateUserRsp)(nil),            // 7: rag_svr.CreateUserRsp
	(*SessionInfo)(nil),              // 8: rag_svr.SessionInfo
	(*ChatRecord)(nil),               // 9: rag_svr.ChatRecord
	(*CreateSessionReq)(nil),         // 10: rag_svr.CreateSessionReq
	(*CreateSessionRsp)(nil),         // 11: rag_svr.CreateSessionRsp
	(*EndSessionReq)(nil),            // 12: rag_svr.EndSessionReq
	(*EndSessionRsp)(nil),            // 13: rag_svr.EndSessionRsp
	(*Document)(nil),                 // 14: rag_svr.Document
	(*AddDocumentReq)(nil),           // 15: rag_svr.AddDocumentReq
	(*AddDocumentRsp)(nil),           // 16: rag_svr.AddDocumentRsp
	(*ListDocumentReq)(nil),          // 17: rag_svr.ListDocumentReq
	(*ListDocumentRsp)(nil),          // 18: rag_svr.ListDocumentRsp
	(*SearchDocumentReq)(nil),        // 19: rag_svr.SearchDocumentReq
	(*SearchDocumentRsp)(nil),        // 20: rag_svr.SearchDocumentRsp
	(*GetSessionListReq)(nil),        // 21: rag_svr.GetSessionListReq
	(*GetSessionListRsp)(nil),        // 22: rag_svr.GetSessionListRsp
	(*GetSessionReq)(nil),            // 23: rag_svr.GetSessionReq
	(*GetSessionRsp)(nil),            // 24: rag_svr.GetSessionRsp
	(*DeleteDocumentReq)(nil),        // 25: rag_svr.DeleteDocumentReq
	(*DeleteDocumentRsp)(nil),        // 26: rag_svr.DeleteDocumentRsp
	(*CleanInactiveSessionsReq)(nil), // 27: rag_svr.CleanInactiveSessionsReq
	(*CleanInactiveSessionsRsp)(nil), // 28: rag_svr.CleanInactiveSessionsRsp
	(*Memory)(nil),                   // 29: rag_svr.Memory
	(*AddMemoryReq)(nil),             // 30: rag_svr.AddMemoryReq
	(*AddMemoryRsp)(nil),             // 31: rag_svr.AddMemoryRsp
	(*GetMemoryReq)(nil),             // 32: rag_svr.GetMemoryReq
	(*GetMemoryRsp)(nil),             // 33: rag_svr.GetMemoryRsp
	(*SearchMemoriesReq)(nil),        // 34: rag_svr.SearchMemoriesReq
	(*SearchMemoriesRsp)(nil),        // 35: rag_svr.SearchMemoriesRsp
	(*DeleteMemoryReq)(nil),          // 36: rag_svr.DeleteMemoryReq
	(*DeleteMemoryRsp)(nil),          // 37: rag_svr.DeleteMemoryRsp
	(*AddChatRecordReq)(nil),         // 38: rag_svr.AddChatRecordReq
	(*AddChatRecordRsp)(nil),         // 39: rag_svr.AddChatRecordRsp
	(*GetChatRecordsReq)(nil),        // 40: rag_svr.GetChatRecordsReq
	(*GetChatRecordsRsp)(nil),        // 41: rag_svr.GetChatRecordsRsp
	nil,                              // 42: rag_svr.SessionInfo.UserStateEntry
	nil,                              // 43: rag_svr.SessionInfo.SystemStateEntry
	nil,                              // 44: rag_svr.SessionInfo.MetadataEntry
}
var file_rag_svr_proto_depIdxs = []int32{
	5,  // 0: rag_svr.CreateUserRsp.user_info:type_name -> rag_svr.UserInfo
	42, // 1: rag_svr.SessionInfo.user_state:type_name -> rag_svr.SessionInfo.UserStateEntry
	43, // 2: rag_svr.SessionInfo.system_state:type_name -> rag_svr.SessionInfo.SystemStateEntry
	9,  // 3: rag_svr.SessionInfo.chat_records:type_name -> rag_svr.ChatRecord
	44, // 4: rag_svr.SessionInfo.metadata:type_name -> rag_svr.SessionInfo.MetadataEntry
	8,  // 5: rag_svr.CreateSessionRsp.session_info:type_name -> rag_svr.SessionInfo
	14, // 6: rag_svr.ListDocumentRsp.documents:type_name -> rag_svr.Document
	14, // 7: rag_svr.SearchDocumentRsp.documents:type_name -> rag_svr.Document
	8,  // 8: rag_svr.GetSessionListRsp.session_list:type_name -> rag_svr.SessionInfo
	8,  // 9: rag_svr.GetSessionRsp.session_info:type_name -> rag_svr.SessionInfo
	29, // 10: rag_svr.GetMemoryRsp.memory:type_name -> rag_svr.Memory
	29, // 11: rag_svr.SearchMemoriesRsp.memories:type_name -> rag_svr.Memory
	9,  // 12: rag_svr.GetChatRecordsRsp.records:type_name -> rag_svr.ChatRecord
	1,  // 13: rag_svr.RagService.Test:input_type -> rag_svr.TestReq
	3,  // 14: rag_svr.RagService.Test2:input_type -> rag_svr.Test2Req
	6,  // 15: rag_svr.RagService.CreateUser:input_type -> rag_svr.CreateUserReq
	10, // 16: rag_svr.RagService.CreateSession:input_type -> rag_svr.CreateSessionReq
	23, // 17: rag_svr.RagService.GetSession:input_type -> rag_svr.GetSessionReq
	12, // 18: rag_svr.RagService.EndSession:input_type -> rag_svr.EndSessionReq
	21, // 19: rag_svr.RagService.GetSessionList:input_type -> rag_svr.GetSessionListReq
	27, // 20: rag_svr.RagService.CleanInactiveSessions:input_type -> rag_svr.CleanInactiveSessionsReq
	15, // 21: rag_svr.RagService.AddDocument:input_type -> rag_svr.AddDocumentReq
	25, // 22: rag_svr.RagService.DeleteDocument:input_type -> rag_svr.DeleteDocumentReq
	19, // 23: rag_svr.RagService.SearchDocument:input_type -> rag_svr.SearchDocumentReq
	17, // 24: rag_svr.RagService.ListDocument:input_type -> rag_svr.ListDocumentReq
	30, // 25: rag_svr.RagService.AddMemory:input_type -> rag_svr.AddMemoryReq
	32, // 26: rag_svr.RagService.GetMemory:input_type -> rag_svr.GetMemoryReq
	34, // 27: rag_svr.RagService.SearchMemories:input_type -> rag_svr.SearchMemoriesReq
	36, // 28: rag_svr.RagService.DeleteMemory:input_type -> rag_svr.DeleteMemoryReq
	38, // 29: rag_svr.RagService.AddChatRecord:input_type -> rag_svr.AddChatRecordReq
	40, // 30: rag_svr.RagService.GetChatRecords:input_type -> rag_svr.GetChatRecordsReq
	2,  // 31: rag_svr.RagService.Test:output_type -> rag_svr.TestRsp
	4,  // 32: rag_svr.RagService.Test2:output_type -> rag_svr.Test2Rsp
	7,  // 33: rag_svr.RagService.CreateUser:output_type -> rag_svr.CreateUserRsp
	11, // 34: rag_svr.RagService.CreateSession:output_type -> rag_svr.CreateSessionRsp
	24, // 35: rag_svr.RagService.GetSession:output_type -> rag_svr.GetSessionRsp
	13, // 36: rag_svr.RagService.EndSession:output_type -> rag_svr.EndSessionRsp
	22, // 37: rag_svr.RagService.GetSessionList:output_type -> rag_svr.GetSessionListRsp
	28, // 38: rag_svr.RagService.CleanInactiveSessions:output_type -> rag_svr.CleanInactiveSessionsRsp
	16, // 39: rag_svr.RagService.AddDocument:output_type -> rag_svr.AddDocumentRsp
	26, // 40: rag_svr.RagService.DeleteDocument:output_type -> rag_svr.DeleteDocumentRsp
	20, // 41: rag_svr.RagService.SearchDocument:output_type -> rag_svr.SearchDocumentRsp
	18, // 42: rag_svr.RagService.ListDocument:output_type -> rag_svr.ListDocumentRsp
	31, // 43: rag_svr.RagService.AddMemory:output_type -> rag_svr.AddMemoryRsp
	33, // 44: rag_svr.RagService.GetMemory:output_type -> rag_svr.GetMemoryRsp
	35, // 45: rag_svr.RagService.SearchMemories:output_type -> rag_svr.SearchMemoriesRsp
	37, // 46: rag_svr.RagService.DeleteMemory:output_type -> rag_svr.DeleteMemoryRsp
	39, // 47: rag_svr.RagService.AddChatRecord:output_type -> rag_svr.AddChatRecordRsp
	41, // 48: rag_svr.RagService.GetChatRecords:output_type -> rag_svr.GetChatRecordsRsp
	31, // [31:49] is the sub-list for method output_type
	13, // [13:31] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_rag_svr_proto_init() }
func file_rag_svr_proto_init() {
	if File_rag_svr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rag_svr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test2Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndSessionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDocumentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDocumentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDocumentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanInactiveSessionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanInactiveSessionsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemoryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemoryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMemoriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMemoriesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMemoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMemoryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChatRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChatRecordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatRecordsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_svr_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rag_svr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rag_svr_proto_goTypes,
		DependencyIndexes: file_rag_svr_proto_depIdxs,
		MessageInfos:      file_rag_svr_proto_msgTypes,
	}.Build()
	File_rag_svr_proto = out.File
	file_rag_svr_proto_rawDesc = nil
	file_rag_svr_proto_goTypes = nil
	file_rag_svr_proto_depIdxs = nil
}
