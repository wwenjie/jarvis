// Code generated by Kitex v0.13.1. DO NOT EDIT.

package ragservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	rag_svr "server/service/rag_svr/kitex_gen/rag_svr"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Test(ctx context.Context, Req *rag_svr.TestReq, callOptions ...callopt.Option) (r *rag_svr.TestRsp, err error)
	Test2(ctx context.Context, Req *rag_svr.Test2Req, callOptions ...callopt.Option) (r *rag_svr.Test2Rsp, err error)
	CreateUser(ctx context.Context, Req *rag_svr.CreateUserReq, callOptions ...callopt.Option) (r *rag_svr.CreateUserRsp, err error)
	CreateSession(ctx context.Context, Req *rag_svr.CreateSessionReq, callOptions ...callopt.Option) (r *rag_svr.CreateSessionRsp, err error)
	GetSession(ctx context.Context, Req *rag_svr.GetSessionReq, callOptions ...callopt.Option) (r *rag_svr.GetSessionRsp, err error)
	EndSession(ctx context.Context, Req *rag_svr.EndSessionReq, callOptions ...callopt.Option) (r *rag_svr.EndSessionRsp, err error)
	GetSessionList(ctx context.Context, Req *rag_svr.GetSessionListReq, callOptions ...callopt.Option) (r *rag_svr.GetSessionListRsp, err error)
	CleanInactiveSessions(ctx context.Context, Req *rag_svr.CleanInactiveSessionsReq, callOptions ...callopt.Option) (r *rag_svr.CleanInactiveSessionsRsp, err error)
	AddDocument(ctx context.Context, Req *rag_svr.AddDocumentReq, callOptions ...callopt.Option) (r *rag_svr.AddDocumentRsp, err error)
	DeleteDocument(ctx context.Context, Req *rag_svr.DeleteDocumentReq, callOptions ...callopt.Option) (r *rag_svr.DeleteDocumentRsp, err error)
	SearchDocument(ctx context.Context, Req *rag_svr.SearchDocumentReq, callOptions ...callopt.Option) (r *rag_svr.SearchDocumentRsp, err error)
	ListDocument(ctx context.Context, Req *rag_svr.ListDocumentReq, callOptions ...callopt.Option) (r *rag_svr.ListDocumentRsp, err error)
	AddMemory(ctx context.Context, Req *rag_svr.AddMemoryReq, callOptions ...callopt.Option) (r *rag_svr.AddMemoryRsp, err error)
	GetMemory(ctx context.Context, Req *rag_svr.GetMemoryReq, callOptions ...callopt.Option) (r *rag_svr.GetMemoryRsp, err error)
	SearchMemories(ctx context.Context, Req *rag_svr.SearchMemoriesReq, callOptions ...callopt.Option) (r *rag_svr.SearchMemoriesRsp, err error)
	DeleteMemory(ctx context.Context, Req *rag_svr.DeleteMemoryReq, callOptions ...callopt.Option) (r *rag_svr.DeleteMemoryRsp, err error)
	AddChatRecord(ctx context.Context, Req *rag_svr.AddChatRecordReq, callOptions ...callopt.Option) (r *rag_svr.AddChatRecordRsp, err error)
	GetChatRecords(ctx context.Context, Req *rag_svr.GetChatRecordsReq, callOptions ...callopt.Option) (r *rag_svr.GetChatRecordsRsp, err error)
	GetWeather(ctx context.Context, Req *rag_svr.GetWeatherReq, callOptions ...callopt.Option) (r *rag_svr.GetWeatherRsp, err error)
	GetHourlyWeather(ctx context.Context, Req *rag_svr.GetHourlyWeatherReq, callOptions ...callopt.Option) (r *rag_svr.GetHourlyWeatherRsp, err error)
	GetDailyWeather(ctx context.Context, Req *rag_svr.GetDailyWeatherReq, callOptions ...callopt.Option) (r *rag_svr.GetDailyWeatherRsp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kRagServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRagServiceClient struct {
	*kClient
}

func (p *kRagServiceClient) Test(ctx context.Context, Req *rag_svr.TestReq, callOptions ...callopt.Option) (r *rag_svr.TestRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Test(ctx, Req)
}

func (p *kRagServiceClient) Test2(ctx context.Context, Req *rag_svr.Test2Req, callOptions ...callopt.Option) (r *rag_svr.Test2Rsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Test2(ctx, Req)
}

func (p *kRagServiceClient) CreateUser(ctx context.Context, Req *rag_svr.CreateUserReq, callOptions ...callopt.Option) (r *rag_svr.CreateUserRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, Req)
}

func (p *kRagServiceClient) CreateSession(ctx context.Context, Req *rag_svr.CreateSessionReq, callOptions ...callopt.Option) (r *rag_svr.CreateSessionRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateSession(ctx, Req)
}

func (p *kRagServiceClient) GetSession(ctx context.Context, Req *rag_svr.GetSessionReq, callOptions ...callopt.Option) (r *rag_svr.GetSessionRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSession(ctx, Req)
}

func (p *kRagServiceClient) EndSession(ctx context.Context, Req *rag_svr.EndSessionReq, callOptions ...callopt.Option) (r *rag_svr.EndSessionRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EndSession(ctx, Req)
}

func (p *kRagServiceClient) GetSessionList(ctx context.Context, Req *rag_svr.GetSessionListReq, callOptions ...callopt.Option) (r *rag_svr.GetSessionListRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSessionList(ctx, Req)
}

func (p *kRagServiceClient) CleanInactiveSessions(ctx context.Context, Req *rag_svr.CleanInactiveSessionsReq, callOptions ...callopt.Option) (r *rag_svr.CleanInactiveSessionsRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CleanInactiveSessions(ctx, Req)
}

func (p *kRagServiceClient) AddDocument(ctx context.Context, Req *rag_svr.AddDocumentReq, callOptions ...callopt.Option) (r *rag_svr.AddDocumentRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddDocument(ctx, Req)
}

func (p *kRagServiceClient) DeleteDocument(ctx context.Context, Req *rag_svr.DeleteDocumentReq, callOptions ...callopt.Option) (r *rag_svr.DeleteDocumentRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteDocument(ctx, Req)
}

func (p *kRagServiceClient) SearchDocument(ctx context.Context, Req *rag_svr.SearchDocumentReq, callOptions ...callopt.Option) (r *rag_svr.SearchDocumentRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchDocument(ctx, Req)
}

func (p *kRagServiceClient) ListDocument(ctx context.Context, Req *rag_svr.ListDocumentReq, callOptions ...callopt.Option) (r *rag_svr.ListDocumentRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListDocument(ctx, Req)
}

func (p *kRagServiceClient) AddMemory(ctx context.Context, Req *rag_svr.AddMemoryReq, callOptions ...callopt.Option) (r *rag_svr.AddMemoryRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddMemory(ctx, Req)
}

func (p *kRagServiceClient) GetMemory(ctx context.Context, Req *rag_svr.GetMemoryReq, callOptions ...callopt.Option) (r *rag_svr.GetMemoryRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMemory(ctx, Req)
}

func (p *kRagServiceClient) SearchMemories(ctx context.Context, Req *rag_svr.SearchMemoriesReq, callOptions ...callopt.Option) (r *rag_svr.SearchMemoriesRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchMemories(ctx, Req)
}

func (p *kRagServiceClient) DeleteMemory(ctx context.Context, Req *rag_svr.DeleteMemoryReq, callOptions ...callopt.Option) (r *rag_svr.DeleteMemoryRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteMemory(ctx, Req)
}

func (p *kRagServiceClient) AddChatRecord(ctx context.Context, Req *rag_svr.AddChatRecordReq, callOptions ...callopt.Option) (r *rag_svr.AddChatRecordRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddChatRecord(ctx, Req)
}

func (p *kRagServiceClient) GetChatRecords(ctx context.Context, Req *rag_svr.GetChatRecordsReq, callOptions ...callopt.Option) (r *rag_svr.GetChatRecordsRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetChatRecords(ctx, Req)
}

func (p *kRagServiceClient) GetWeather(ctx context.Context, Req *rag_svr.GetWeatherReq, callOptions ...callopt.Option) (r *rag_svr.GetWeatherRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetWeather(ctx, Req)
}

func (p *kRagServiceClient) GetHourlyWeather(ctx context.Context, Req *rag_svr.GetHourlyWeatherReq, callOptions ...callopt.Option) (r *rag_svr.GetHourlyWeatherRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetHourlyWeather(ctx, Req)
}

func (p *kRagServiceClient) GetDailyWeather(ctx context.Context, Req *rag_svr.GetDailyWeatherReq, callOptions ...callopt.Option) (r *rag_svr.GetDailyWeatherRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDailyWeather(ctx, Req)
}
