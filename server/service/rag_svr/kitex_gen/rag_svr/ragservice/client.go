// Code generated by Kitex v0.13.1. DO NOT EDIT.

package ragservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streamcall "github.com/cloudwego/kitex/client/callopt/streamcall"
	streamclient "github.com/cloudwego/kitex/client/streamclient"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
	rag_svr "server/service/rag_svr/kitex_gen/rag_svr"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Test(ctx context.Context, Req *rag_svr.TestReq, callOptions ...callopt.Option) (r *rag_svr.TestRsp, err error)
	Test2(ctx context.Context, Req *rag_svr.Test2Req, callOptions ...callopt.Option) (r *rag_svr.Test2Rsp, err error)
	CreateUser(ctx context.Context, Req *rag_svr.CreateUserReq, callOptions ...callopt.Option) (r *rag_svr.CreateUserRsp, err error)
	CreateSession(ctx context.Context, Req *rag_svr.CreateSessionReq, callOptions ...callopt.Option) (r *rag_svr.CreateSessionRsp, err error)
	EndSession(ctx context.Context, Req *rag_svr.EndSessionReq, callOptions ...callopt.Option) (r *rag_svr.EndSessionRsp, err error)
	SendMessage(ctx context.Context, Req *rag_svr.SendMessageReq, callOptions ...callopt.Option) (r *rag_svr.SendMessageRsp, err error)
	SendMessageStream(ctx context.Context, Req *rag_svr.SendMessageReq, callOptions ...callopt.Option) (stream RagService_SendMessageStreamClient, err error)
	AddDocument(ctx context.Context, Req *rag_svr.AddDocumentReq, callOptions ...callopt.Option) (r *rag_svr.AddDocumentRsp, err error)
	SearchDocument(ctx context.Context, Req *rag_svr.SearchDocumentReq, callOptions ...callopt.Option) (r *rag_svr.SearchDocumentRsp, err error)
	GetSessionList(ctx context.Context, Req *rag_svr.GetSessionListReq, callOptions ...callopt.Option) (r *rag_svr.GetSessionListRsp, err error)
	CleanInactiveSessions(ctx context.Context, Req *rag_svr.CleanInactiveSessionsReq, callOptions ...callopt.Option) (r *rag_svr.CleanInactiveSessionsRsp, err error)
}

// StreamClient is designed to provide Interface for Streaming APIs.
type StreamClient interface {
	SendMessageStream(ctx context.Context, Req *rag_svr.SendMessageReq, callOptions ...streamcall.Option) (stream RagService_SendMessageStreamClient, err error)
}

type RagService_SendMessageStreamClient interface {
	streaming.Stream
	Recv() (*rag_svr.SendMessageRsp, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kRagServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRagServiceClient struct {
	*kClient
}

func (p *kRagServiceClient) Test(ctx context.Context, Req *rag_svr.TestReq, callOptions ...callopt.Option) (r *rag_svr.TestRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Test(ctx, Req)
}

func (p *kRagServiceClient) Test2(ctx context.Context, Req *rag_svr.Test2Req, callOptions ...callopt.Option) (r *rag_svr.Test2Rsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Test2(ctx, Req)
}

func (p *kRagServiceClient) CreateUser(ctx context.Context, Req *rag_svr.CreateUserReq, callOptions ...callopt.Option) (r *rag_svr.CreateUserRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, Req)
}

func (p *kRagServiceClient) CreateSession(ctx context.Context, Req *rag_svr.CreateSessionReq, callOptions ...callopt.Option) (r *rag_svr.CreateSessionRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateSession(ctx, Req)
}

func (p *kRagServiceClient) EndSession(ctx context.Context, Req *rag_svr.EndSessionReq, callOptions ...callopt.Option) (r *rag_svr.EndSessionRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EndSession(ctx, Req)
}

func (p *kRagServiceClient) SendMessage(ctx context.Context, Req *rag_svr.SendMessageReq, callOptions ...callopt.Option) (r *rag_svr.SendMessageRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendMessage(ctx, Req)
}

func (p *kRagServiceClient) SendMessageStream(ctx context.Context, Req *rag_svr.SendMessageReq, callOptions ...callopt.Option) (stream RagService_SendMessageStreamClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendMessageStream(ctx, Req)
}

func (p *kRagServiceClient) AddDocument(ctx context.Context, Req *rag_svr.AddDocumentReq, callOptions ...callopt.Option) (r *rag_svr.AddDocumentRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddDocument(ctx, Req)
}

func (p *kRagServiceClient) SearchDocument(ctx context.Context, Req *rag_svr.SearchDocumentReq, callOptions ...callopt.Option) (r *rag_svr.SearchDocumentRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchDocument(ctx, Req)
}

func (p *kRagServiceClient) GetSessionList(ctx context.Context, Req *rag_svr.GetSessionListReq, callOptions ...callopt.Option) (r *rag_svr.GetSessionListRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSessionList(ctx, Req)
}

func (p *kRagServiceClient) CleanInactiveSessions(ctx context.Context, Req *rag_svr.CleanInactiveSessionsReq, callOptions ...callopt.Option) (r *rag_svr.CleanInactiveSessionsRsp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CleanInactiveSessions(ctx, Req)
}

// NewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
func NewStreamClient(destService string, opts ...streamclient.Option) (StreamClient, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, streamclient.GetClientOptions(opts)...)

	kc, err := client.NewClient(serviceInfoForStreamClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kRagServiceStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
// It panics if any error occurs.
func MustNewStreamClient(destService string, opts ...streamclient.Option) StreamClient {
	kc, err := NewStreamClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRagServiceStreamClient struct {
	*kClient
}

func (p *kRagServiceStreamClient) SendMessageStream(ctx context.Context, Req *rag_svr.SendMessageReq, callOptions ...streamcall.Option) (stream RagService_SendMessageStreamClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.SendMessageStream(ctx, Req)
}
