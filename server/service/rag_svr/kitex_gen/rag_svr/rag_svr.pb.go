// Code generated by Kitex v0.13.1. DO NOT EDIT.

package rag_svr

import (
	"context"

	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/prutal"
)

// 基础响应
type BaseRsp struct {
	Code uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (x *BaseRsp) Reset() { *x = BaseRsp{} }

func (x *BaseRsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *BaseRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *BaseRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 定义获取用户请求
type TestReq struct {
	SeqId uint32 `protobuf:"varint,1,opt,name=seq_id" json:"seq_id,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (x *TestReq) Reset() { *x = TestReq{} }

func (x *TestReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *TestReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *TestReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *TestReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 定义获取用户响应
type TestRsp struct {
	Code uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (x *TestRsp) Reset() { *x = TestRsp{} }

func (x *TestRsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *TestRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *TestRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TestRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Test2Req struct {
	SeqId uint32 `protobuf:"varint,1,opt,name=seq_id" json:"seq_id,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (x *Test2Req) Reset() { *x = Test2Req{} }

func (x *Test2Req) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Test2Req) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Test2Req) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *Test2Req) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Test2Rsp struct {
	Code uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (x *Test2Rsp) Reset() { *x = Test2Rsp{} }

func (x *Test2Rsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Test2Rsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Test2Rsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Test2Rsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 用户管理
type UserInfo struct {
	UserId     uint64 `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=user_name" json:"user_name,omitempty"`
	Email      string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	CreateTime string `protobuf:"bytes,4,opt,name=create_time" json:"create_time,omitempty"`
	UpdateTime string `protobuf:"bytes,5,opt,name=update_time" json:"update_time,omitempty"`
}

func (x *UserInfo) Reset() { *x = UserInfo{} }

func (x *UserInfo) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserInfo) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserInfo) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CreateUserReq struct {
	SeqId    uint32 `protobuf:"varint,1,opt,name=seq_id" json:"seq_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (x *CreateUserReq) Reset() { *x = CreateUserReq{} }

func (x *CreateUserReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CreateUserReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateUserReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *CreateUserReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CreateUserRsp struct {
	Code     uint32    `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg      string    `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	UserInfo *UserInfo `protobuf:"bytes,3,opt,name=user_info" json:"user_info,omitempty"`
}

func (x *CreateUserRsp) Reset() { *x = CreateUserRsp{} }

func (x *CreateUserRsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CreateUserRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateUserRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateUserRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateUserRsp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// 会话管理（MySQL）
type SessionInfo struct {
	SessionId   uint64            `protobuf:"varint,1,opt,name=session_id" json:"session_id,omitempty"`
	UserId      uint64            `protobuf:"varint,2,opt,name=user_id" json:"user_id,omitempty"`
	Title       string            `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`     // 会话标题
	Summary     string            `protobuf:"bytes,4,opt,name=summary" json:"summary,omitempty"` // 会话摘要
	Status      string            `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`   // 会话状态
	CreateTime  string            `protobuf:"bytes,6,opt,name=create_time" json:"create_time,omitempty"`
	UpdateTime  string            `protobuf:"bytes,7,opt,name=update_time" json:"update_time,omitempty"`
	UserState   map[string]string `protobuf:"bytes,8,rep,name=user_state" json:"user_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`     // 用户状态
	SystemState map[string]string `protobuf:"bytes,9,rep,name=system_state" json:"system_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 系统状态
	ChatRecords []*ChatRecord     `protobuf:"bytes,10,rep,name=chat_records" json:"chat_records,omitempty"`                                                                          // 对话记录
	Metadata    map[string]string `protobuf:"bytes,11,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`        // 会话元数据
}

func (x *SessionInfo) Reset() { *x = SessionInfo{} }

func (x *SessionInfo) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SessionInfo) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SessionInfo) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SessionInfo) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SessionInfo) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *SessionInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SessionInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SessionInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SessionInfo) GetUserState() map[string]string {
	if x != nil {
		return x.UserState
	}
	return nil
}

func (x *SessionInfo) GetSystemState() map[string]string {
	if x != nil {
		return x.SystemState
	}
	return nil
}

func (x *SessionInfo) GetChatRecords() []*ChatRecord {
	if x != nil {
		return x.ChatRecords
	}
	return nil
}

func (x *SessionInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 对话记录
type ChatRecord struct {
	ChatId      uint64 `protobuf:"varint,1,opt,name=chat_id" json:"chat_id,omitempty"`
	SessionId   uint64 `protobuf:"varint,2,opt,name=session_id" json:"session_id,omitempty"`
	UserId      uint64 `protobuf:"varint,3,opt,name=user_id" json:"user_id,omitempty"`
	Message     string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Response    string `protobuf:"bytes,5,opt,name=response" json:"response,omitempty"`
	CreateTime  string `protobuf:"bytes,6,opt,name=create_time" json:"create_time,omitempty"`
	MessageType string `protobuf:"bytes,7,opt,name=message_type" json:"message_type,omitempty"` // text, image, etc.
	Status      string `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`             // pending, completed, failed
}

func (x *ChatRecord) Reset() { *x = ChatRecord{} }

func (x *ChatRecord) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ChatRecord) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ChatRecord) GetChatId() uint64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatRecord) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ChatRecord) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatRecord) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatRecord) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *ChatRecord) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ChatRecord) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *ChatRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 创建会话请求
type CreateSessionReq struct {
	SeqId  uint32 `protobuf:"varint,1,opt,name=seq_id" json:"seq_id,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id" json:"user_id,omitempty"`
}

func (x *CreateSessionReq) Reset() { *x = CreateSessionReq{} }

func (x *CreateSessionReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CreateSessionReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateSessionReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *CreateSessionReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CreateSessionRsp struct {
	Code        uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg         string       `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	SessionInfo *SessionInfo `protobuf:"bytes,3,opt,name=session_info" json:"session_info,omitempty"`
}

func (x *CreateSessionRsp) Reset() { *x = CreateSessionRsp{} }

func (x *CreateSessionRsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CreateSessionRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateSessionRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateSessionRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateSessionRsp) GetSessionInfo() *SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

// 发送消息请求
type SendMessageReq struct {
	SeqId       uint32 `protobuf:"varint,1,opt,name=seq_id" json:"seq_id,omitempty"`
	SessionId   uint64 `protobuf:"varint,2,opt,name=session_id" json:"session_id,omitempty"`
	UserId      uint64 `protobuf:"varint,3,opt,name=user_id" json:"user_id,omitempty"`
	Message     string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	MessageType string `protobuf:"bytes,5,opt,name=message_type" json:"message_type,omitempty"`
	Context     string `protobuf:"bytes,6,opt,name=context" json:"context,omitempty"` // 添加文档上下文
}

func (x *SendMessageReq) Reset() { *x = SendMessageReq{} }

func (x *SendMessageReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SendMessageReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SendMessageReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *SendMessageReq) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SendMessageReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SendMessageReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendMessageReq) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *SendMessageReq) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type SendMessageRsp struct {
	Code        uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg         string       `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	ChatRecord  *ChatRecord  `protobuf:"bytes,3,opt,name=chat_record" json:"chat_record,omitempty"`
	SessionInfo *SessionInfo `protobuf:"bytes,4,opt,name=session_info" json:"session_info,omitempty"` // 更新后的会话信息
}

func (x *SendMessageRsp) Reset() { *x = SendMessageRsp{} }

func (x *SendMessageRsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SendMessageRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SendMessageRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SendMessageRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SendMessageRsp) GetChatRecord() *ChatRecord {
	if x != nil {
		return x.ChatRecord
	}
	return nil
}

func (x *SendMessageRsp) GetSessionInfo() *SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

// 结束会话请求
type EndSessionReq struct {
	SeqId     uint32 `protobuf:"varint,1,opt,name=seq_id" json:"seq_id,omitempty"`
	SessionId uint64 `protobuf:"varint,2,opt,name=session_id" json:"session_id,omitempty"`
}

func (x *EndSessionReq) Reset() { *x = EndSessionReq{} }

func (x *EndSessionReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EndSessionReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EndSessionReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *EndSessionReq) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

type EndSessionRsp struct {
	Code uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (x *EndSessionRsp) Reset() { *x = EndSessionRsp{} }

func (x *EndSessionRsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EndSessionRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EndSessionRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EndSessionRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 知识文档
type Document struct {
	DocId      uint64 `protobuf:"varint,1,opt,name=doc_id" json:"doc_id,omitempty"`
	UserId     uint64 `protobuf:"varint,2,opt,name=user_id" json:"user_id,omitempty"`
	Title      string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Content    string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Metadata   string `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	CreateTime string `protobuf:"bytes,6,opt,name=create_time" json:"create_time,omitempty"`
	UpdateTime string `protobuf:"bytes,7,opt,name=update_time" json:"update_time,omitempty"`
}

func (x *Document) Reset() { *x = Document{} }

func (x *Document) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Document) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Document) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *Document) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Document) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Document) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Document) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Document) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Document) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type AddDocumentReq struct {
	SeqId    uint32 `protobuf:"varint,1,opt,name=seq_id" json:"seq_id,omitempty"`
	UserId   uint64 `protobuf:"varint,2,opt,name=user_id" json:"user_id,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Metadata string `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *AddDocumentReq) Reset() { *x = AddDocumentReq{} }

func (x *AddDocumentReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AddDocumentReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AddDocumentReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *AddDocumentReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddDocumentReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddDocumentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddDocumentReq) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type AddDocumentRsp struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	DocId uint64 `protobuf:"varint,3,opt,name=doc_id" json:"doc_id,omitempty"`
}

func (x *AddDocumentRsp) Reset() { *x = AddDocumentRsp{} }

func (x *AddDocumentRsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AddDocumentRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AddDocumentRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddDocumentRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddDocumentRsp) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

type SearchDocumentReq struct {
	SeqId  uint32 `protobuf:"varint,1,opt,name=seq_id" json:"seq_id,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id" json:"user_id,omitempty"`
	Query  string `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	TopK   int32  `protobuf:"varint,4,opt,name=top_k" json:"top_k,omitempty"`
}

func (x *SearchDocumentReq) Reset() { *x = SearchDocumentReq{} }

func (x *SearchDocumentReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SearchDocumentReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SearchDocumentReq) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *SearchDocumentReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchDocumentReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchDocumentReq) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

type SearchDocumentRsp struct {
	Code      uint32      `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg       string      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Documents []*Document `protobuf:"bytes,3,rep,name=documents" json:"documents,omitempty"`
	Scores    []float32   `protobuf:"fixed32,4,rep,packed,name=scores" json:"scores,omitempty"`
}

func (x *SearchDocumentRsp) Reset() { *x = SearchDocumentRsp{} }

func (x *SearchDocumentRsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SearchDocumentRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SearchDocumentRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SearchDocumentRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SearchDocumentRsp) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *SearchDocumentRsp) GetScores() []float32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

// 会话管理
type GetSessionListReq struct {
	UserId    uint64 `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`         // 可选，会话状态过滤
	StartTime string `protobuf:"bytes,3,opt,name=start_time" json:"start_time,omitempty"` // 可选，开始时间
	EndTime   string `protobuf:"bytes,4,opt,name=end_time" json:"end_time,omitempty"`     // 可选，结束时间
	Page      int32  `protobuf:"varint,5,opt,name=page" json:"page,omitempty"`            // 页码，从1开始
	PageSize  int32  `protobuf:"varint,6,opt,name=page_size" json:"page_size,omitempty"`  // 每页大小
}

func (x *GetSessionListReq) Reset() { *x = GetSessionListReq{} }

func (x *GetSessionListReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetSessionListReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetSessionListReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSessionListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetSessionListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetSessionListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetSessionListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSessionListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetSessionListRsp struct {
	Code        uint32         `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg         string         `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Total       int64          `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`              // 总数
	Page        int32          `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`                // 当前页码
	PageSize    int32          `protobuf:"varint,5,opt,name=page_size" json:"page_size,omitempty"`      // 每页大小
	SessionList []*SessionInfo `protobuf:"bytes,6,rep,name=session_list" json:"session_list,omitempty"` // 会话列表
}

func (x *GetSessionListRsp) Reset() { *x = GetSessionListRsp{} }

func (x *GetSessionListRsp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetSessionListRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetSessionListRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSessionListRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetSessionListRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSessionListRsp) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSessionListRsp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSessionListRsp) GetSessionList() []*SessionInfo {
	if x != nil {
		return x.SessionList
	}
	return nil
}

type CleanInactiveSessionsReq struct {
	InactiveDays int32 `protobuf:"varint,1,opt,name=inactive_days" json:"inactive_days,omitempty"` // 不活跃天数
}

func (x *CleanInactiveSessionsReq) Reset() { *x = CleanInactiveSessionsReq{} }

func (x *CleanInactiveSessionsReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *CleanInactiveSessionsReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CleanInactiveSessionsReq) GetInactiveDays() int32 {
	if x != nil {
		return x.InactiveDays
	}
	return 0
}

type CleanInactiveSessionsRsp struct {
	Code         uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg          string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	CleanedCount int64  `protobuf:"varint,3,opt,name=cleaned_count" json:"cleaned_count,omitempty"` // 清理的会话数量
}

func (x *CleanInactiveSessionsRsp) Reset() { *x = CleanInactiveSessionsRsp{} }

func (x *CleanInactiveSessionsRsp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *CleanInactiveSessionsRsp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CleanInactiveSessionsRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CleanInactiveSessionsRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CleanInactiveSessionsRsp) GetCleanedCount() int64 {
	if x != nil {
		return x.CleanedCount
	}
	return 0
}

type RagService interface {
	Test(ctx context.Context, req *TestReq) (res *TestRsp, err error)
	Test2(ctx context.Context, req *Test2Req) (res *Test2Rsp, err error)
	CreateUser(ctx context.Context, req *CreateUserReq) (res *CreateUserRsp, err error)
	CreateSession(ctx context.Context, req *CreateSessionReq) (res *CreateSessionRsp, err error)
	EndSession(ctx context.Context, req *EndSessionReq) (res *EndSessionRsp, err error)
	SendMessage(ctx context.Context, req *SendMessageReq) (res *SendMessageRsp, err error)
	SendMessageStream(req *SendMessageReq, stream RagService_SendMessageStreamServer) (err error)
	AddDocument(ctx context.Context, req *AddDocumentReq) (res *AddDocumentRsp, err error)
	SearchDocument(ctx context.Context, req *SearchDocumentReq) (res *SearchDocumentRsp, err error)
	GetSessionList(ctx context.Context, req *GetSessionListReq) (res *GetSessionListRsp, err error)
	CleanInactiveSessions(ctx context.Context, req *CleanInactiveSessionsReq) (res *CleanInactiveSessionsRsp, err error)
}

type RagService_SendMessageStreamServer interface {
	streaming.Stream
	Send(*SendMessageRsp) error
}
